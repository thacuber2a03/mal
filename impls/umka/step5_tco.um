import (
	"std.um"

	"types.um"
	"reader.um"
	"printer.um"
	"core.um"
	"env.um"
)

fn READ(input: str): types::Object {
	return reader::readStr(input)
}

fn EVAL(ast: types::Object, env: env::Env): types::Object

fn uncons(l: types::List): (types::Object, []types::Object) {
	return l.data[0], slice(l.data, 1, len(l.data))
}

fn evalDef(args: []types::Object, env: env::Env): types::Object {
	s := ^types::Sym(args[0])
	if s == null {
		return types::newError("expected symbol key for def!")
	}
	v := EVAL(args[1], env)
	if types::isError(v) { return v }
	env.set(s^, v)
	return v
}

fn evalLet(args: []types::Object, env: ^env::Env): types::Object {
	newenv := env::mk({})
	newenv.outer = env^

	if b := ^types::List(args[0]); b == null {
		return types::newError("expected list of bindings for let*")
	}
	bindings := types::List(args[0]).data

	i := 0
	for i < len(bindings) {
		if i+1 >= len(bindings) {
			return types::newError("odd amount of forms in let*")
		}

		k := ^types::Sym(bindings[i])
		if k == null {
			return types::newError("expected symbol to bind in let*")
		}

		v := EVAL(bindings[i+1], newenv)
		if types::isError(v) { return v }
		newenv.set(k^,v)
		i+=2
	}

	env^ = newenv
	return args[1]
}

fn evalDo(args: []types::Object, env: env::Env): types::Object {
	if len(args) == 0 { return types::Nil{} }
    for i := 0; i < len(args)-2; i++ {
        if v := EVAL(args[i], env); types::isError(v) { return v }
    }
    return args[len(args)-1]
}

fn evalIf(args: []types::Object, env: env::Env): types::Object {
	if len(args) < 2 {
		return types::newError("expected at least 2 arguments to if")
	}

	v := EVAL(args[0], env)
	if types::isError(v)  { return v }
	if types::isTruthy(v) { return args[1] }
	if len(args) == 2 { return types::Nil{} }
	return args[2]
}

fn evalFn(args: []types::Object, env: env::Env): types::Object {
	symListErr := types::newError("expected a list of symbols in fn*")

	l := ^types::List(args[0])
	if l == null { return symListErr }

	params := make([]types::Sym, len(l.data))
	for i,v in l.data {
		if s := ^types::Sym(v); s != null {
			params[i] = s^
			if s^ == "&" && i == len(l.data)-1 {
				return types::newError("expected symbol after '&'")
			}
		} else {
			return symListErr
		}
	}

	ast := args[1]
	return types::Fn{
		ast: ast, params: params, env: env,
		f: |params, ast, env| {
			newenv := env::mk2(params, args)
			newenv.outer = env
			return EVAL(ast, newenv)
		}
	}
}

var depth: int = 0
fn EVAL(ast: types::Object, env: env::Env): types::Object {
	depth++
	for true {
		if v := env.get("DEBUG-EVAL"); types::isTruthy(v) {
			printf("EVAL (depth %d): %s\n", depth, printer::prStr(ast, false))
		}

		switch v := type(ast) {
		case types::Sym:
			depth--; return env.get(v)
		case types::List:
			if len(v.data) == 0 { depth--; return ast }

			if first, rest := uncons(v); ^types::Sym(first) != null {
				s := types::Sym(first)
				// this is really cursed
				if s == "def!" {
					ast = evalDef(rest, env)
					continue
				} else if s == "let*" {
					ast = evalLet(rest, &env)
					continue
				} else if s == "do" {
					ast = evalDo(rest, env)
					continue
				} else if s == "if" {
					ast = evalIf(rest, env)
					continue
				} else if s == "fn*" {
					ast = evalFn(rest, env)
					continue
				}
			}

			l := types::newCollection({}, v.vector)
			for i, v in v.data {
				e := EVAL(v, env)
				if types::isError(e) { depth--; return e }
				l.data = append(l.data, e)
			}
			if l.vector { depth--; return l } // real clever

			first, rest := uncons(l)
			if p := ^types::PrimFn(first); p != null {
				depth--; return p(rest) 
			} else if f := ^types::Fn(first); f != null {
				ast = f.ast
				newenv := env::mk2(f.params, rest)
				newenv.outer = env
				env = newenv
				continue
			} else {
				depth--; return types::newError(sprintf(
					"attempt to call uncallable `%s`", printer::prStr(first, true)
				))
			}
		case types::HashMap:
			res := types::HashMap{}
			for k,val in v {
				e := EVAL(val, env)
				if types::isError(e) { depth--; return e }
				res[k] = e
			}
			depth--; return res
		}

		depth--; return ast
	}
	std::assert(false, "unreachable")
	depth--; return types::Object(types::Nil{})
}

fn PRINT(input: types::Object): str {
	return printer::prStr(input, true)
}

fn rep(input: str, env: env::Env): str {
	return PRINT(EVAL(READ(input), env))
}

fn getline(): (str, bool) {
	if std::feof(std::stdin()) { return "", true }

	res := ""
	for true {
		var c: char
		if n, e := std::fread(std::stdin(), &c); n != 1 {
			std::assert(std::StdErr(e.code) == .eof)
			return "", true
		}
		if c == '\n' { break }
		res += c
	}

	return res, false
}

fn main() {
	replEnv := core::ns(rep)
	for true {
		printf("user> ")
		input, eof := getline()
		if eof { break }
		printf("%s\n", rep(input, replEnv))
	}
}
