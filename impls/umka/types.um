import (
	"std.um"
)

type (
	Object* = interface{}

	String* = struct{
		value: str
		keyword: bool
	}

	Nil* = struct{}
	Bool* = bool
	Num* = real
	List* = struct {
		data: []Object
		vector: bool
	}
	HashMap* = map[String]Object

	Sym* = str

	Error* = struct{
		// line: int
		msg: str
	}

	PrimFn* = fn(args: []Object): Object

	// in case closures become a bottleneck later on
	Fn* = fn(args: []Object): Object
)

// this is an 'ABI/API separation' kind of thing

fn newError*(msg: str): Error { return Error{msg:msg}    }

fn newString*(s: str): String { return String{value:s, keyword:false} }
fn newKeyword*(s: str): String { return String{value:s, keyword:true} }

fn newList*(l: []Object): List   { return List{data: l, vector: false} }
fn newVector*(l: []Object): List { return List{data: l, vector: true } }

fn newCollection*(l: []Object, v: bool): List { return List{data: l, vector: v} }

fn newStringHashMap*(m: map[str]Object): HashMap {
	res := HashMap{}
	for k,v in m { res[newString(k)] = v }
	return res
}

fn isError*(o: Object): bool  { return ^Error(o) != null }
fn isHashMapKey*(v: Object): bool { return ^String(v) != null }

fn symMatches*(v: Object, s: str): bool {
	sym := ^Sym(v)
	return sym != null && sym^ == s
}

fn isTruthy*(o: Object): bool {
	// false, nil, and errors aren't truthy
	if isError(o) || ^Nil(o) != null { return false }
	if b := ^Bool(o); b != null { return b^ }
	return true
}

fn equal*(a, b: Object): bool {
	if !selftypeeq(a, b) { return false }

	switch v := type(a) {
	case Sym: return v == Sym(b)
	case Num: return v == Num(b)
	case String:
		w := String(b)
		return v.value == w.value && v.keyword == w.keyword
	case Bool: return v == Bool(b)
	case Nil: return true

	case List:
		w := List(b)
		if len(v.data) != len(w.data) { return false }
		for i,v in v.data {
			if !equal(v, w.data[i]) { return false }
		}
		return true

	case HashMap:
		w := HashMap(b)
		if len(v) != len(w) { return false }
		for k,v in v { if !equal(v, w[k]) { return false } }
		return true
	}

	return false
}
