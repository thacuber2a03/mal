import (
	"std.um"

	"types.um"
)

fn prStr*(v: types::Object, readable: bool): str

fn escape(s: str): str {
	var res: str

	for i,c in s {
		switch c {
		case '"': res += "\\\""
		case '\\': res += "\\\\"
		case '\n': res += "\\n"
		case '\r': res += "\\r"
		case '\t': res += "\\t"
		default: res += c
		}
	}

	return res
}

fn prStr*(v: types::Object, readable: bool): str {
	var res: str
	switch v := type(v) {
	case types::Num:
		res = sprintf("%g", v)
	case types::String:
		if v.keyword {
			res = ':' + v.value
		} else if readable {
			res = '"' + escape(v.value) + '"'
		} else {
			res = v.value
		}
	case types::Sym:
		res = v
	case types::Nil:
		res = "nil"
	case types::Bool:
		res = sprintf("%v", v)
	case types::List:
		s := v.vector ? "[" : "("
		for i, val in v.data {
			s += prStr(val, readable)
			if i < len(v.data)-1 { s += " " }
		}
		res = s + (v.vector ? "]" : ")")
	case types::HashMap:
		s := "{"
		ks := keys(v)
		for i, k in ks {
			v := v[k]
			s += sprintf("%s %s", prStr(k, readable), prStr(v, readable))
			if i < len(ks)-1 { s += " " }
		}
		res = s + "}"

	case types::PrimFn: res = "#<primitive>"
	case types::Fn:     res = "#<function>"

	case types::Error: res = sprintf("error: %s", v.msg)
	}

	return res
}
