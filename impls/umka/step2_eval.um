import (
	"std.um"

	"types.um"
	"reader.um"
	"printer.um"
)

type (
	Env = map[str]types::PrimFn
)

fn READ(input: str): types::Object {
	return reader::readStr(input)
}

fn EVAL(ast: types::Object, env: Env): types::Object

fn evalList(list: types::List, env: Env): types::Object {
	res := make([]types::Object, len(list.data))
	for i, v in list.data {
		e := EVAL(v, env)
		if types::isError(e) { return e }
		res[i]=e
	}
	return types::newCollection(res, list.vector)
}

fn EVAL(ast: types::Object, env: Env): types::Object {
	printf("EVAL: %s\n", printer::prStr(ast, true))
	switch v := type(ast) {
	case types::Sym:
		if validkey(env, v) { return env[v] }
		return types::newError(sprintf("'%s' not found", v))
	case types::List:
		if len(v.data) == 0 { return ast }

		e := evalList(v, env)
		printf("before evaluation: %v\nafter evaluation: %v\n\n", v, e)
		if types::isError(e) { return e }
		l := types::List(e)
		if l.vector { return l } // real clever

		first := l.data[0]
		rest := slice(l.data, 1, len(l.data))

		if f := ^types::PrimFn(first); f != null {
			return f(rest)
		}
	case types::HashMap:
		res := types::HashMap{}
		for k,val in v {
			e := EVAL(val, env)
			if types::isError(e) { return e }
			res[k] = e
		}
		return res
	}
	return ast
}

fn PRINT(input: types::Object): str {
	return printer::prStr(input, false)
}

fn rep(input: str, env: Env): str {
	return PRINT(EVAL(READ(input), env))
}

fn getline(): (str, bool) {
	if std::feof(std::stdin()) { return "", true }

	res := ""
	for true {
		var c: char
		if n, e := std::fread(std::stdin(), &c); n != 1 {
			std::assert(std::StdErr(e.code) == .eof)
			return "", true
		}
		if c == '\n' { break }
		res += c
	}

	return res, false
}

fn op(f: fn(a, b: types::Num): types::Num): types::PrimFn {
	return |f| {
		a := ^types::Num(args[0])
		if a == null { return types::newError("expected number") }
		b := ^types::Num(args[1])
		if b == null { return types::newError("expected number") }
		return types::Num(f(a^,b^))
	}
}

fn main() {
	replEnv := Env{
		"+": op({return a + b}),
		"-": op({return a - b}),
		"*": op({return a * b}),
		"/": op({return a / b})
	}

	for true {
		printf("user> ")
		input, eof := getline()
		if eof { break }
		printf("%s\n", rep(input, replEnv))
	}
}
