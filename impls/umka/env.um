import (
	"types.um"
)

type (
	Env* = ^EnvImpl
	EnvImpl = struct {
		outer: Env
		data: map[types::Sym]types::Object
	}
)

fn (e: ^EnvImpl) set*(s: types::Sym, v: types::Object) {
	e.data[s] = v
}

fn (e: ^EnvImpl) get*(s: types::Sym): types::Object {
	if validkey(e.data, s) {
		return e.data[s]
	} else if e.outer != null {
		return e.outer.get(s)
	}
	return types::newError(sprintf("'%s' not found", s))
}

fn mk*(e: map[types::Sym]types::Object): Env { return &EnvImpl{data: e} }

fn mk2*(binds: []types::Sym, exprs: []types::Object): Env {
	e := &EnvImpl{}
	for i,s in binds {
		if s == "&" {
			e.set(binds[i+1], types::newList(slice(exprs, i, len(exprs))))
			break
		}
		e.set(s, exprs[i])
	}
	return e
}
