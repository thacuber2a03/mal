import (
	"types.um"
)

type Env* = struct {
	outer: ^Env
	data: map[types::Sym]types::Object
}

fn mk*(e: map[types::Sym]types::Object): Env {
	return Env{outer: null, data: e}
}

fn (e: ^Env) set*(s: types::Sym, v: types::Object) {
	e.data[s] = v
}

fn (e: ^Env) get*(s: types::Sym): types::Object {
	if validkey(e.data, s) {
		return e.data[s]
	} else if e.outer != null {
		return e.outer.get(s)
	}
	return types::newError(sprintf("'%s' not found", s))
}
